# Generated by Django 3.2.5 on 2021-08-04 22:01

from django.db import migrations
from customers.models import Customer, Special_pickups, CompletedPickup
from employees.models import Employee
from datetime import date, timedelta
from random import randint

def create_dummy_pickups(apps, schema_editor):
    # Get customers for each day of week
    monday_customers = Customer.objects.filter(pickup_day="Monday")
    tuesday_customers = Customer.objects.filter(pickup_day="Tuesday")
    wednesday_customers = Customer.objects.filter(pickup_day="Wednesday")
    thursday_customers = Customer.objects.filter(pickup_day="Thursday")
    friday_customers = Customer.objects.filter(pickup_day="Friday")
    saturday_customers = Customer.objects.filter(pickup_day="Saturday")
    sunday_customers = Customer.objects.filter(pickup_day="Sunday")

    # For each customer in each day group:
    # - Make new completed pickup
    # - Save new completed pickup
    create_standard_completed_pickups(monday_customers)
    create_standard_completed_pickups(tuesday_customers)
    create_standard_completed_pickups(wednesday_customers)
    create_standard_completed_pickups(thursday_customers)
    create_standard_completed_pickups(friday_customers)
    create_standard_completed_pickups(saturday_customers)
    create_standard_completed_pickups(sunday_customers)

    # Get all customers
    all_customers = Customer.objects.all()
    # Randomly select some number of customers
    random_indices = [randint(0, len(all_customers)) for i in range(20)]
    random_customer_selection = [all_customers[index] for index in random_indices]
    # For each customer in randomly selected customers:
    for customer in random_customer_selection:
        current_pickup_day = customer.pickup_day
        pickup_day_index = get_weekday_index(current_pickup_day)
    # - Randomly pick a date that doesn't fall on a normal pickup day
        year = 2021
        month = randint(6, 9)
        day = randint(1, 30)
        random_day = date(year, month, day)
        if random_day.weekday() == pickup_day_index:
            random_day = random_day + timedelta(randint(1, 6))
        relevant_employee = Employee.objects.filter(zipcode=customer.zipcode).first()
    # - Make a new completed pickup
        current_pickup = CompletedPickup(date=random_day, customer=customer, employee=relevant_employee)
    # - save new completed pickup
        current_pickup.save()
    # - Make a new special pickup
        current_special_pickup = Special_pickups(special_pickup_date=random_day, customer=customer)
    # - Save special pickup
        current_special_pickup.save()


def create_standard_completed_pickups(customer_group):
    # Get the first date to create a completed pickup
    weekday = customer_group[0].pickup_day
    weekday_index = get_weekday_index(weekday)
    reference_date = date(2021, 5, 31)
    start_date = reference_date + timedelta(weekday_index)

    for customer in customer_group:
        while start_date < date.today():
            relevant_employee = Employee.objects.filter(zipcode=customer.zipcode).first()
            current_pickup = CompletedPickup(date=start_date, customer=customer, employee=relevant_employee)
            current_pickup.save()
            start_date = start_date + timedelta(7)


def get_weekday_index(day):
    days = {
        "Monday": 0,
        "Tuesday": 1,
        "Wednesday": 2,
        "Thursday": 3,
        "Friday": 4,
        "Saturday": 5,
        "Sunday": 6
    }
    return days[day]

class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0008_auto_20210804_1142'),
    ]

    operations = [
        migrations.RunPython(create_dummy_pickups)
    ]
