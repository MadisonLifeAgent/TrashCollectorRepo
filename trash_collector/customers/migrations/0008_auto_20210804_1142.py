# Generated by Django 3.2.5 on 2021-08-04 16:42

from django.db import migrations
from random import randint
from datetime import date
from customers.models import Customer
from accounts.models import User

def create_dummy_data(apps, schema_editor):
    #Customer = apps.get_model('customers', 'Customer')
    #User = apps.get_model('accounts', 'User')
    Customer.objects.all().delete()

    # Need to get all the existing users with id > 20
    created_users = User.objects.all()
    created_users = created_users[20:220]

    # 200 sets of data for the customers, randomly generated
    # name(string), user(user), zipcode(string), pickup_day(string), address(string), suspend_start(date), suspend_end(date), balance(int)
    customer_names = ["Amber Oriol", "Mauro Mundell", "Agatha Suniga", "Wava Awad", "Shandra Stefanski", "Luigi Aube", "Latonya Brittingham", "Terina Staggs", "Celina Paulin", "Salena Deel", "Margie Mcgaugh", "Javier Goucher", "Cesar Dragon", "Leslie Seymore", "Olivia Rodenberger", "Dennis Boddy", "Magdalen Walson", "Mike Almon", "Jennell Howser", "Serita Burchette", "Thuy Grief", "Shawana Erikson", "Florida Pita", "Deedra Mello", "Magaret Dalley", "Hee Billy", "Truman Schuller", "Anastasia Reta", "Lacy Eckart", "Emeline Gigliotti", "Chaya Lehrman", "Elden Meszaros", "Lyndsey Zermeno", "Winford Marrin", "Lyndsay Laracuente", "Devona Foutch", "Patience Clarkson", "Lindsay Nocera", "Pierre Hedges", "Shon Maharaj", "Alycia Keeter", "Brigid Jacks", "Bryanna Isabell", "Dee Segarra", "Raymonde Johansen", "Lean Chouinard", "Neva Wotton", "Kenneth Vanorden", "Detra Michalowski", "Berta Betancourt", "Leanne Wellman", "Erna Arreguin", "Sheila Christman", "Adrianna Threlkeld", "Janelle Ishikawa", "Blossom Burkhalter", "Cleotilde Lecroy", "Nellie Colosimo", "Nova Caprio", "Rebeca Boan", "Eboni Reichling", "Lieselotte Mccollum", "Galen Firkins", "Yulanda Pebley", "Darleen Weiner", "Rosario Folson", "Else Eason", "Randal Fowler", "Myra Withey", "Nancee Dempster", "Ronda Villicana", "Cletus Devos", "Grace Geers", "Farrah Enfinger", "Wes Gagnier", "Delphine Santee", "Marcus Rayos", "Jessia Pasek", "Sherly Knarr", "Meda Tidd", "Kandace Dustin", "Belinda Fell", "Isaiah Kirschner", "Rosalina Villalba", "Sharri Triche", "Joannie Stamant", "Margorie Hoffert", "Candis Goatley", "Bridgett Haber", "Titus Piccard", "Charla Polston", "Fidelia Rushton", "Brenna Tejera", "Junko Jared", "Chasity Franzoni", "Wally Johannes", "Arleen Fader", "Floria Ping", "Angelita Nishimura", "Hayden Crouch", "Anastasia Pfister", "Melania Mcdill", "Eileen Pears", "Kecia Congdon", "Tonette Rolland", "Basilia Kiss", "Sarah Pomeroy", "Bobette Otten", "Rubie Meehan", "Shoshana Zaleski", "Jimmie Jefcoat", "Wen Tinch", "Brady Surface", "Lisette Hipps", "Sam Rampton", "Troy Netherland", "Veola Wardlow", "Waldo Grider", "Harry Carcamo", "Viva Manges", "Carie Ohanlon", "Chin Hasting", "Rodrick Seel", "Jeffrey Slick", "Otilia Dudding", "Jene Larrison", "Aleida Blumenthal", "Dessie Blann", "Margareta Beaston", "Illa Wanke", "Hilma Afanador", "Lashawn Regnier", "Melodee Cha", "Maynard Piedra", "Lucile Voth", "Ophelia Hemingway", "Reatha Conry", "Adria Denman", "Maye Narvaez", "Winona Ensor", "Ayako Groman", "Luella Spahr", "Avril Center", "Kristeen Yowell", "Sophia Gile", "Edmundo Baltzell", "Shenna Lucious", "Tenisha Aho", "Junko Stackpole", "Joline Dusseault", "Verlene Kisner", "Caridad Kamen", "Elisa Few", "Tyrell Sweat", "Raymonde Sottile", "Ron Plouffe", "Lorrie Mott", "Norris Laguardia", "Nicolle Rarick", "Greg Harig", "Jacquelyn Scicchitano", "Columbus Sizer", "Lillia Albert", "Nikole Medley", "Velma Gills", "Freddy Grabowski", "Cristal Legette", "Dayle Tarkington", "Prudence Staggs", "Marg Moulden", "Dolly Chiles", "Yu Flicker", "Carlee Sok", "Whitley Mailman", "Charise Presgraves", "Terrance Mackey", "Cole Eckley", "Carmine Fehr", "Carlota Hibbs", "Frank Krantz", "Tawnya Swearingen", "Masako Prosperie", "Craig Weinberg", "Concetta Humphries", "Thao Whitbeck", "Mafalda Strobel", "Damien Yokota", "Brooks Golliday", "Marquitta Katzman", "Kum Kato", "Adrian Haughey", "Leonel Tigue", "Jong Rucks", "Lissa Poage", "Arianna Grissom", "Floy Dossantos", "Sherrie Alder", "Ivey Sistrunk", "Chery Braham", "Amelia Seger"]

    addresses = ["5140 Water Dipper Rd", "531 Bickley Cir", "6407 Gossamer St", "1401 Main St", "6670 Metropolitan St", "5024 Pathfinder Dr", "935 Binger Dr", "5230 Eden Ln", "4915 Gibbon St", "521 Violet Dr", "1101 Evergreen Dr", "436 Rose Dr", "809 Maple Dr", "1616 Widefield Dr", "731 Andover St", "724 Squire St", "617 Empress Cir", "6655 President Ave", "163 Grinnell St", "159 Fordham St", "148 Dartmouth St", "123 Cornell St", "1350 Prado Dr", "1398 Luna Dr", "1451 River Dr", "1690 Bonita Dr", "1489 Bonita Dr", "1815 River Dr", "255 Lanfare Pl", "230 Peck Ct", "249 Corliss St", "834 Hubbell Dr", "850 Crandall Dr", "260 Hooper Ct", "375 Hinks Ct", "935 Lindstrom Dr", "940 Lindstrom Dr", "910 Binger Dr", "950 Withington Dr", "480 Athens Dr", "1025 Withington Dr", "1015 Modell Dr", "530 Jayton Dr", "605 Brinn Ct", "629 Widick St", "635 Montrail Dr", "858 Eagle Bend Dr", "928 Pond Side Dr", "815 Eagle Bend Dr", "835 Eagle Bend Dr", "528 Lee St", "513 Lee St", "104 Red Feather Ct", "124 Red Feather Ct", "216 Round About Rd", "301 Steeple Rd", "305 Holly Pines Ct", "208 Holiday Ct", "325 Brooks St", "409 E Earp St", "108 Cabrita Ct", "329 Birdsong Way", "220 Peakhill Rd", "209 Stargate Rd", "204 Adelaide Rd", "124 Holly Mountain Rd", "137 Lacombe Ct", "104 Hartness Dr", "204 Oakenshaw Dr", "213 Horncliffe Way", "128 Park Bluff Dr", "2805 Mills Lake Wynd", "209 Logans Manor Dr", "628 Bass Lake Rd", "104 Ulverston Dr", "405 Birkby Way", "608 Dogwood Rd", "501 Bass Lake Rd", "204 Flatrock Ln", "105 Norwalk St", "301 Holly Park Dr", "308 Holly Park Dr", "4928 Timbergreen Ln", "325 Flatrock Ln", "5104 Sunset Walk Ln", "4960 Gable Ridge Ln", "300 Gablewood Ln", "316 Middlecrest Way", "301 Middlecrest Way", "100 Kingsport Rd", "217 Crossway Ln", "4833 Linksland Dr", "104 Ontario Pl", "116 Starwood Ln", "401 Kingsport Rd", "414 Crossway Ln", "417 Crossway Ln", "233 Midden Way", "220 Midden Way", "109 Daisy Grove Ln", "62 W Stratford Ave", "75 W Stratford Ave", "85 W Lacrosse Ave", "51 Windermere Ave", "38 Runnemede Ave", "35 Windermere Ave", "30 Windermere Ave", "119 W Baltimore Ave", "17 Ardmore Ave", "142 W Baltimore Ave", "4 E Windermere Terrace", "10 Willowbrook Ave", "24 Willowbrook Ave", "44 Ardmore Ave", "35 Willowbrook Ave", "69 Ardmore Ave", "121 W Stratford Ave", "149 Bryn Mawr Ave", "95 Mansfield Ave", "160 W Essex Ave", "183 W Essex Ave", "192 W Essex Ave", "159 Eldon Ave", "234 Berkley Ave", "233 Berkley Ave", "247 Berkley Ave", "159 Kerr Pl", "160 Kerr Pl", "3202 Berkley Ave", "273 Drexel Ave", "259 Drexel Ave", "250 W Plumstead Ave", "243 Drexel Ave", "241 W Plumstead Ave", "226 W Plumstead Ave", "189 Glentay Ave", "202 W Albemarle Ave", "167 Glentay Ave", "163 W Albemarle Ave", "142 W Albemarle Ave", "100 Marshall Rd", "2513 Marshall Rd", "271 Ardmore Ave", "96 W Albemarle Ave", "97 W Plumstead Ave", "114 W Plumstead Ave", "247 Richards Ave", "254 Richards Ave", "47 Rose Ln", "31 Rose Ln", "4307 Moselle Dr", "6338 Port Ln", "6356 Sauterne Dr", "6332 Sauterne Dr", "6410 Liberty Fairfield Rd", "7831 Bridgewater Ln", "4173 Melbourne Dr", "6432 Stapleton Ct", "6606 Chandler Way", "7636 Bridgewater Ln", "6546 Chandler Way", "6458 Taylor Trace Ln", "3929 Prescott Ct", "3990 Prescott Ct", "3980 Carrington Way", "3999 Carrington Way", "3889 Carrington Way", "6304 Jayfield Dr", "3918 Jayfield Ct", "3965 Jayfield Ct", "6239 Jayfield Dr", "3972 Bayberry Dr", "4015 Bramble Ct", "4066 Bramble Ct", "4075 Bayberry Dr", "4108 Privet Ct", "4089 Privet Ct", "4105 Bayberry Ct", "6373 Shannon Dr", "6392 Shannon Dr", "6419 Shannon Dr", "6169 Cavalcade Dr", "6196 Cavalcade Dr", "6208 Cavalcade Dr", "6398 Hillgale Ln", "6367 Hillgale Ln", "6331 Hillgale Ln", "6283 Hillgale Ln", "6106 Hedge Ln", "6143 Liberty Fairfield Rd", "4016 Greatus Dr", "4004 Greatus Dr", "3956 Millikin Rd", "3971 Millikin Rd", "5907 Greenlawn Rd", "5854 Greenlawn Rd", "5790 Greenlawn Rd", "5684 Longbow Dr", "5741 Longbow Dr", "5752 Quiver Ct"]

    suspension_dates = [
        (date(2021, 8, 1), date(2021, 9, 1)),
        (date(2021, 8, 15), date(2021, 9, 15)),
        (date(2021, 8, 15), date(2021, 9, 1)),
        (date(2021, 8, 1), date(2021, 8, 15)),
        (date(2021, 8, 15), date(2021, 8, 21)),
        (date(2021, 8, 1), date(2022, 8, 1)),
        (date(2021, 10, 1), date(2021, 10, 31)),
        (date(2021, 12, 20), date(2021, 12, 30)),
        (date(2021, 11, 1), date(2021, 11, 11)),
        (date(2021, 8, 1), date(2021, 8, 2)),
    ]

    pickup_day_options = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
    ]

    zipcode_options = [
        "80911",
        "27540",
        "19050",
        "45011"
    ]

    for i in range(len(created_users)):
        # Randomly select data from fields with fixed values and less than 200 items long
        # Otherwise, grab the value at the index
        name = customer_names[i]
        zipcode = zipcode_options[i // 50]
        pickup_day = pickup_day_options[randint(0, 6)]
        address = addresses[i]
        balance = randint(0, 100)

        has_suspension_dates = (0 == randint(0, 5))
        if has_suspension_dates:
            suspension_pair = suspension_dates[randint(0, 9)]
            suspend_start = suspension_pair[0]
            suspend_end = suspension_pair[1]
        else:
            suspend_start = None
            suspend_end = None

        current_customer = Customer(name=name, 
                                    user=created_users[i], 
                                    zipcode=zipcode, 
                                    pickup_day=pickup_day,
                                    address=address,
                                    balance=balance,
                                    suspend_start=suspend_start,
                                    suspend_end=suspend_end)
        current_customer.save()


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0007_rename_customer_id_special_pickups_customer'),
        ('accounts', '0002_auto_20210804_1142')
    ]

    operations = [
        migrations.RunPython(create_dummy_data)
    ]
